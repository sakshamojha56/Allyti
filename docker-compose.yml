version: '3.8'

services:
  # PostgreSQL Database (Professional Section)
  postgres:
    image: postgres:15-alpine
    container_name: allyti-postgres
    environment:
      POSTGRES_DB: allyti_dev
      POSTGRES_USER: allyti
      POSTGRES_PASSWORD: development_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - allyti-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U allyti -d allyti_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database (Anonymous Section)
  mongodb:
    image: mongo:6-jammy
    container_name: allyti-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: allyti
      MONGO_INITDB_ROOT_PASSWORD: development_password
      MONGO_INITDB_DATABASE: allyti_anonymous
    volumes:
      - mongodb_data:/data/db
      - ./packages/database/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    ports:
      - "27017:27017"
    networks:
      - allyti-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: allyti-redis
    command: redis-server --appendonly yes --requirepass development_password
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - allyti-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: allyti-elasticsearch
    environment:
      - node.name=allyti-es01
      - cluster.name=allyti-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - allyti-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Elasticsearch Management (Optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: allyti-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=development_password
    ports:
      - "5601:5601"
    networks:
      - allyti-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - monitoring

  # MinIO for Local S3-compatible Storage
  minio:
    image: minio/minio:latest
    container_name: allyti-minio
    environment:
      MINIO_ROOT_USER: allyti
      MINIO_ROOT_PASSWORD: development_password
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - allyti-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Mailcatcher for Email Testing
  mailcatcher:
    image: sj26/mailcatcher:latest
    container_name: allyti-mailcatcher
    ports:
      - "1080:1080"  # Web interface
      - "1025:1025"  # SMTP server
    networks:
      - allyti-network
    profiles:
      - development

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: allyti-prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - allyti-network
    profiles:
      - monitoring

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: allyti-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - allyti-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: allyti-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
    networks:
      - allyti-network
    profiles:
      - monitoring

  # Nginx for Local Load Balancing
  nginx:
    image: nginx:alpine
    container_name: allyti-nginx
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    networks:
      - allyti-network
    depends_on:
      - postgres
      - mongodb
      - redis
      - elasticsearch
    profiles:
      - production

networks:
  allyti-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
